
#Print monthly calendar without modules
#Sunshine Leeuwon, 10/03/2021

    # calling for user input on which month
print('Please enter the number corresponding to the monthly calendar you would like to print: ')
ipt = int(input()) 

    # table each month's related stats needed to do calculations
if ipt == 1:
    month = 'January'
    start = 7
    days = 30
if ipt == 2:
    month = 'Febrary'
    start = 3
    days = 28
if ipt == 3:
    month = 'March'
    start = 3
    days = 31
if ipt == 4:
    month = 'April'
    start = 6
    days = 30
if ipt == 5:
    month = 'May'
    start = 0
    days = 31
if ipt == 6:
    month = 'June'
    start = 4
    days = 30
if ipt == 7:
    month = 'July'
    start = 6
    days = 31
if ipt == 8:
    month = 'August'
    start = 2
    days = 31
if ipt == 9:
    month = 'September'
    start = 5
    days = 30
if ipt == 10:
    month = 'October'
    start = 7
    days = 31
if ipt == 11:
    month = 'November'
    start = 3
    days = 30
if ipt == 12:
    month = 'December'
    start = 5
    days = 31
else:
     print('Month does not exist.')
     exit()
  
    # defining a space so that viewers know exactly how many spaces are used in the rest of the code
space = ' '

    # printing heading
print(4 * space + month + space + '2022')

    # printing column headings for days of the week
print('Su' + space + 'Mo' + space + 'Tu' + space + 'We' + space + 'Th' + space + 'Fr' + space + 'Sa')

    # making the start day into the number of days before the start day
    # alternatively you could set start equal to the number of days before the start day at the beginning in the table, but this made more sense to me
start = start - 1

    # print spaces at the beginning of the first line/week to set the cursor in the column of the correct start day
print(3 * space * (start), end = '')

    # code to print the days of the month in calendar format
for i in range(1, days + 1):
    start += 1                         # adding one day to the start day so that each iteration in the loop you are moving up one start day as the day of the month gets larger              
    if (start % 7) != 0:                        # if the current day is not Saturday, aka the last weekday column
        print("%.2d" % i + space, end = '')                        # printing the days you are on, in the same row
    else:                                       # if the current day is Saturday
        print("%.2d" % i)                                        # printing the day you are on, on a different row because now it is a new week





